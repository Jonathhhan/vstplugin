#######################################################################
### .git-ci/gitlab-iem.yml for Pd externals: v1.2
###
### this can be used for any external with a build system like:
### - 'make' builds the external
### - 'make install' installs the external to be used by Pd
### the following make variables must be honoured:
### - extension: filename extension for externals
### - DESTDIR: base directory for 'make install'
### - pkgPLATFORM: directory to put externals into (relative to DESTDIR)
###
### one well known build-system that can be used straight away is
### "pd-lib-builder" -> https://github.com/pure-data/pd-lib-builder/
#######################################################################

variables:
  PDVERSION: 0.51-1
  VST2DIR: /tmp/vst2sdk
  VST3DIR: /tmp/vst3sdk
  SC_PATH: /tmp/supercollider
  PDLIBNAME: vstplugin~
  SCLIBNAME: VSTPlugin

### script snippets

.script:deps: &script_deps
  - .git-ci/get_vst2.sh "${VST2DIR}"
  - .git-ci/get_vst3.sh "${VST3DIR}"
  - git clone https://github.com/supercollider/supercollider.git "${SC_PATH}"
  - pushd "${SC_PATH}"
  - git submodule update --init
  - popd

.script:cmake: &script_cmake
  - cmake -H. -Bbuild -DVST2DIR="${VST2DIR}" -DVST3DIR="${VST3DIR}"
   -DBUILD_HOST32=${HOST32} -DSTATIC_LIBS=${STATIC_LIBS}
   -DPD_EXTENSION=${PD_EXTENSION} -DPD_DIR="${PD_PATH}" -DPD_INSTALLDIR="$(pwd)/${CI_JOB_NAME%_*}"
   -DSUPERNOVA=${SUPERNOVA} -DSC_INCLUDEDIR="${SC_PATH}" -DSC_INSTALLDIR="$(pwd)/${CI_JOB_NAME%_*}"

### build snippets
.script:make: &script_make
  - make -C build VERBOSE=1
.script:make_install: &script_make_install
  - make -C build install/strip VERBOSE=1

#######################################################################
### configuration templates (to be used for snapshot and release builds)
.build:script:
  stage: build
  script:
    - *script_make
    - *script_make_install
  artifacts:
    name: ${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_JOB_NAME%_*}
    paths:
      - "${CI_JOB_NAME%_*}/${PDLIBNAME}"
      - "${CI_JOB_NAME%_*}/${SCLIBNAME}"

.snapshot:
  except:
    - tags
  artifacts:
    expire_in: 1 week

.release:
  only:
    - tags

.build:linux: &build_linux
  extends: .build:script
  image: gcc
  variables:
    SUPERNOVA: 1
    STATIC_LIBS: 1
  before_script:
    - apt-get update && apt-get install -y --no-install-recommends make cmake
      puredata-dev puredata
    - *script_deps
    - *script_cmake

.build:linux_i386: &build_linux_i386
  allow_failure: true
  extends: .build:linux
  image: registry.git.iem.at/devtools/docker/debiancross:i386
  variables:
    PD_EXTENSION: l_i386

.build:macos: &build_macos
  extends: .build:script
  tags:
     - osx
  variables:
    SUPERNOVA: 1
    HOST32: 1
  before_script:
    - wget -q -O Pd.tgz http://msp.ucsd.edu/Software/pd-${PDVERSION}.mac.tar.gz
    - rm -rf /Applications/Pd*.app/
    - tar xvf Pd.tgz -C /Applications/
    - rm -f Pd.tgz
    - *script_deps
    - *script_cmake

.build:w32: &build_w32
  extends: .build:script
  tags:
    - windows
  variables:
    IEMCI_CONFIGURATIONS: mingw32
    SUPERNOVA: 1
    STATIC_LIBS: 1
    PD_URL: http://msp.ucsd.edu/Software/pd-${PDVERSION}-i386.msw.zip
  before_script:
    - pacman --noconfirm -S cmake
    - wget -q -O Pd.zip ${PD_URL}
# install locally to avoid hassles with Windows vs. Unix file paths.
# NOTE: PD_PATH is also used in .script:cmake.
    - export PD_PATH=/tmp/pd
    - rm -rf "${PD_PATH}"; mkdir -p "${PD_PATH}"
    - unzip -q Pd.zip -d "${PD_PATH}"
    - mv -v "${PD_PATH}"/*/* "${PD_PATH}"
    - *script_deps
    - *script_cmake

.build:w64: &build_w64
  extends: .build:w32
  variables:
    IEMCI_CONFIGURATIONS: mingw64
    PD_EXTENSION: m_amd64
    PD_URL: http://msp.ucsd.edu/Software/pd-${PDVERSION}.msw.zip

### job templates
.Linux:
  <<: *build_linux
.Linux_i386:
  allow_failure: true
  <<: *build_linux_i386
.Darwin:
  <<: *build_macos
.w32:
  <<: *build_w32
.w64:
  <<: *build_w64

#######################################################################
### create deken packages and (optionally) upload them;
### if you want to automatically upload a package, you need to
### set DEKEN_USERNAME/DEKEN_PASSWORD in the CI-project settings.
### (https://git.iem.at/help/ci/variables/README#variables)
.package:
  stage: deploy
  image: debian:buster
  variables:
    DEKEN_ROOT: "yes"
  before_script:
    - apt-get update && apt-get --no-install-recommends -y install deken git zip
  script:
# copy win32 host to win64 package and vice versa
    - if [ -e ./w32 ] && [ -e ./w64 ]; then
        for x in ${PDLIBNAME} ${SCLIBNAME}/plugins; do
          cp ./w32/$x/host.exe ./w64/$x/host_i386.exe;
          cp ./w64/$x/host.exe ./w32/$x/host_amd64.exe
        ; done
      ; fi
# create zip files for all platform (e.g. vstplugin~_v0.3.0_w32.zip)
    - rm -f ./*.zip
    - for lib in ${PDLIBNAME} ${SCLIBNAME}; do
        for dir in ./*/$lib; do
          name=${lib}_${CI_COMMIT_REF_NAME}_$(basename "${dir%/$lib}");
          (cd "${dir}/.." && zip -r "../${name}.zip" ./${lib})
        ; done
      ; done
# create binary deken packages for all platforms
    - rm -f ./*.dek
    - deken package --version="${CI_COMMIT_TAG#v}" ./*/${PDLIBNAME}
# upload deken package (optional)
    - test -z "${CI_COMMIT_TAG}" || test -z "${DEKEN_USERNAME}" || test -z "${DEKEN_PASSWORD}" || deken upload --no-source-error ./*.dek
  artifacts:
    name: ${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_package
    paths:
      - ./*.dek
      - ./*.zip


#######################################################################
### the actual jobs: (linux,macos,windows)*(release,snapshot)

### release jobs
Linux:
  extends:
    - .Linux
    - .release
Linux_i386:
  extends:
    - .Linux_i386
    - .release
Darwin:
  extends:
    - .Darwin
    - .release
w32:
  extends:
    - .w32
    - .release
w64:
  extends:
    - .w64
    - .release
package:
  extends:
    - .package
    - .release

### snapshot jobs
Linux_snapshot:
  extends:
    - .Linux
    - .snapshot
Linux_i386_snapshot:
  extends:
    - .Linux_i386
    - .snapshot
Darwin_snapshot:
  extends:
    - .Darwin
    - .snapshot
w32_snapshot:
  extends:
    - .w32
    - .snapshot
w64_snapshot:
  extends:
    - .w64
    - .snapshot
package_snapshot:
  extends:
    - .package
    - .snapshot

