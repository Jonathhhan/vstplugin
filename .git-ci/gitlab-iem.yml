---
#######################################################################
### based on .git-ci/gitlab-iem.yml for Pd externals: v1.2
#######################################################################

variables:
  PROJECT: vstplugin
  JOBS: all
  PDVERSION: 0.54-1
  VST2DIR: /tmp/vst2sdk
  VST3DIR: /tmp/vst3sdk
  SC_PATH: /tmp/supercollider
  PDLIBNAME: vstplugin~
  SCLIBNAME: VSTPlugin

### script snippets

.script:deps: &script_deps
  - .git-ci/get_vst2.sh "${VST2DIR}"
  - .git-ci/get_vst3.sh "${VST3DIR}"
  - git clone https://github.com/supercollider/supercollider.git "${SC_PATH}"
  - pushd "${SC_PATH}"
  - git submodule update --init
  - popd

# NOTE: we have to use absolute paths for PD_INSTALLDIR and SC_INSTALLDIR.
# For some reason, relative paths (including '.') are not appended to CMAKE_INSTALL_PREFIX
# as they should be, instead they are resolved to the source directory *before* getting passed to CMake.
.script:cmake: &script_cmake
  - prefix="$(pwd)/${CI_JOB_NAME}"
  - cmake -H. -Bbuild -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX="${prefix}" -DCMAKE_OSX_ARCHITECTURES="${OSX_ARCHITECTURES}"
   -DVST2DIR="${VST2DIR}" -DVST3DIR="${VST3DIR}" -DSTATIC_LIBS=${STATIC_LIBS} -DWINE=${WINE}
   -DBUILD_WINE=${BUILD_WINE} -DBUILD_HOST32=${BUILD_HOST32} -DBUILD_HOST_AMD64=${BUILD_HOST_AMD64}
   -DPD_EXTENSION=${PD_EXTENSION} -DPD_DIR="${PD_PATH}" -DPD_INSTALLDIR="${prefix}"
   -DSUPERNOVA=${SUPERNOVA} -DSC_INCLUDEDIR="${SC_PATH}" -DSC_INSTALLDIR="${prefix}"
   -DCMAKE_DEPENDS_USE_COMPILER=OFF
  # NOTE: by default, CMake 3.21+ uses the compiler to obtain dependencies for makefiles ('compiler_depends.make').
  # For some reason, on the 'Hopper' runner that file would contain bogus file paths such as 'vst/C:/msys64/mingw32/include/c++/10.2.0/vector'
  # which will cause the following invocation of 'cmake --build ./build --target install/strip' to fail with 'multiple target patterns'.
  # As a workaround, we force the legacy behavior with -DCMAKE_DEPENDS_USE_COMPILER=OFF.

### build snippets
.script:make: &script_make
  - cmake --build ./build --config Release -j -- VERBOSE=1
.script:make_install: &script_make_install
  - cmake --build ./build --config Release --target install/strip -- VERBOSE=1

#######################################################################
### configuration templates (to be used for snapshot and release builds)
.build:script:
  stage: build
  script:
    - *script_make
    - *script_make_install
  artifacts:
    name: ${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_JOB_NAME}
    paths:
      - "${CI_JOB_NAME}/${PDLIBNAME}"
      - "${CI_JOB_NAME}/${SCLIBNAME}"

.base:
  artifacts:
    expire_in: 1 week

.build:linux: &build_linux
  extends: .build:script
  image: gcc
  variables:
    SUPERNOVA: 1
    STATIC_LIBS: 1
    WINE: 1
  only:
    variables:
      - $JOBS == "all" || $JOBS == "linux"
  before_script:
    - apt-get update && apt-get install -y --no-install-recommends
      make cmake wget git libx11-dev${TARGETDEBARCH:+:}${TARGETDEBARCH} puredata-dev puredata
    - test "x${TARGETDEBARCH}" != "x" && { export CXX=${TARGETARCH}-g++; }
    - *script_deps
    - *script_cmake

.build:linux_i386: &build_linux_i386
  extends: .build:linux
  image: registry.git.iem.at/devtools/docker/debiancross:i386
  variables:
    PD_EXTENSION: l_i386

.build:linux_armhf: &build_linux_armhf
  extends: .build:linux
  image: registry.git.iem.at/devtools/docker/debiancross:armhf
  variables:
    PD_EXTENSION: l_arm

.build:linux_arm64: &build_linux_arm64
  extends: .build:linux
  image: registry.git.iem.at/devtools/docker/debiancross:arm64
  variables:
    PD_EXTENSION: l_arm64

.build:linux_wine: &build_linux_wine
  extends: .build:script
  image: registry.git.iem.at/devtools/docker/debiancross:amd64
  variables:
    STATIC_LIBS: 1
    BUILD_WINE: 1
  only:
    variables:
      - $JOBS == "all" || $JOBS == "wine"
  before_script:
    - DEB_TARGET_ARCH_BITS=$(dpkg-architecture ${TARGETDEBARCH:+-A} ${TARGETDEBARCH} -q DEB_TARGET_ARCH_BITS)
    - apt-get update
    - test "x${DEB_TARGET_ARCH_BITS}" = "x32" &&
      { export CXXFLAGS="-m32"; apt-get install gcc-multilib g++-multilib; }
    - apt-get install make cmake wget git libx11-dev wine${DEB_TARGET_ARCH_BITS}-tools wine
    - .git-ci/get_vst2.sh "${VST2DIR}"
    - .git-ci/get_vst3.sh "${VST3DIR}"
    - *script_cmake

.build:linux_wine32: &build_linux_wine32
  extends: .build:linux_wine
  image: registry.git.iem.at/devtools/docker/debiancross:i386

.build:macos: &build_macos
  extends: .build:script
  tags:
     - bigsur
  variables:
    OSX_ARCHITECTURES: "arm64;x86_64"
    SUPERNOVA: 1
    BUILD_HOST_AMD64: 0
    PD_URL: http://msp.ucsd.edu/Software/pd-${PDVERSION}.macos.zip
    PD_EXTENSION: d_fat
  only:
    variables:
      - $JOBS == "all" || $JOBS == "macos"
  before_script:
    - wget -q -O Pd.zip ${PD_URL}
    - rm -rf /Applications/Pd*.app/
# unzip and install .dmg
    - unzip -q Pd.zip
    - hdiutil attach Pd-${PDVERSION}.dmg
    - cp -R /Volumes/Pd-${PDVERSION}/Pd-${PDVERSION}.app /Applications
    - hdiutil unmount /Volumes/Pd-${PDVERSION}
    - rm -f Pd.zip
    - rm -f Pd-${PDVERSION}.dmg
    - *script_deps
    - *script_cmake
  after_script:
    - IEM_SIGN_SRCDIR="$(pwd)/${CI_JOB_NAME}"
    - !reference [.script:codesign:macos]

.build:w32: &build_w32
  extends: .build:script
  tags:
    - windows
  variables:
    IEMCI_CONFIGURATIONS: mingw32
    SUPERNOVA: 1
    STATIC_LIBS: 1
    PD_URL: http://msp.ucsd.edu/Software/pd-${PDVERSION}-i386.msw.zip
    CMAKE: mingw-w64-i686-cmake
  only:
    variables:
      - $JOBS == "all" || $JOBS == "windows"
  before_script:
    - pacman --noconfirm -S ${CMAKE}
    - wget -q -O Pd.zip ${PD_URL}
# install locally to avoid hassles with Windows vs. Unix file paths.
# NOTE: PD_PATH is also used in .script:cmake.
    - export PD_PATH=/tmp/pd
    - rm -rf "${PD_PATH}"; mkdir -p "${PD_PATH}"
    - unzip -q Pd.zip -d "${PD_PATH}"
    - mv -v "${PD_PATH}"/*/* "${PD_PATH}"
    - *script_deps
    - *script_cmake

.build:w64: &build_w64
  extends: .build:w32
  variables:
    IEMCI_CONFIGURATIONS: mingw64
    PD_EXTENSION: m_amd64
    PD_URL: http://msp.ucsd.edu/Software/pd-${PDVERSION}.msw.zip
    CMAKE: mingw-w64-x86_64-cmake

### job templates
.Linux:
  <<: *build_linux
.Linux_i386:
  allow_failure: true
  <<: *build_linux_i386
.Linux_ARMhf:
  allow_failure: true
  <<: *build_linux_armhf
.Linux_ARM64:
  allow_failure: true
  <<: *build_linux_arm64
.Linux_wine:
  allow_failure: true
  <<: *build_linux_wine
.Linux_wine32:
  allow_failure: true
  <<: *build_linux_wine32
.Darwin:
  <<: *build_macos
.w32:
  <<: *build_w32
.w64:
  <<: *build_w64

#######################################################################
### create deken packages and (optionally) upload them;
### if you want to automatically upload a package, you need to
### set DEKEN_USERNAME/DEKEN_PASSWORD in the CI-project settings.
### (https://git.iem.at/help/ci/variables/README#variables)
.package:
  stage: deploy
  image: debian:buster
  variables:
    DEKEN_ROOT: "yes"
  only:
    variables:
      - $JOBS == "all"
  before_script:
    - apt-get update && apt-get --no-install-recommends -y install deken git zip
  script:
# copy win32 host to win64 package and vice versa
    - if [ -e ./w32 ] && [ -e ./w64 ]; then
        for x in ${PDLIBNAME} ${SCLIBNAME}/plugins; do
          cp ./w32/$x/host.exe ./w64/$x/host_i386.exe;
          cp ./w64/$x/host.exe ./w32/$x/host_amd64.exe
        ; done
      ; fi
# copy Wine hosts to Linux packages
    - if [ -e ./Linux ]; then
        for x in ${PDLIBNAME} ${SCLIBNAME}/plugins; do
          [ -e ./Linux_wine ] && cp -r ./Linux_wine/${PDLIBNAME}/. ./Linux/${x};
          [ -e ./Linux_wine32 ] && cp -r ./Linux_wine32/${PDLIBNAME}/. ./Linux/${x}
        ; done
      ; fi
    - if [ -e ./Linux_i386 ]; then
        for x in ${PDLIBNAME} ${SCLIBNAME}/plugins; do
          [ -e ./Linux_wine32 ] && cp -r ./Linux_wine32/${PDLIBNAME}/. ./Linux_i386/${x}
        ; done
      ; fi
# HACK: remove Linux_wine folders because we don't want to package them
    - rm -rf ./Linux_wine ./Linux_wine32
# create zip files for all platform (e.g. vstplugin~_v0.3.0_w32.zip)
    - rm -f ./*.zip
    - for lib in ${PDLIBNAME} ${SCLIBNAME}; do
        for dir in ./*/$lib; do
          name=${lib}_${CI_COMMIT_REF_NAME}_$(basename "${dir%/$lib}");
          echo zipping $name ;
          (cd "${dir}/.." && zip -r "../${name}.zip" ./${lib})
        ; done
      ; done
# create binary deken packages for all platforms
    - rm -f ./*.dek
    - deken package --version="${CI_COMMIT_TAG#v}" ./*/${PDLIBNAME}
# upload deken package (optional)
    - test -z "${CI_COMMIT_TAG}" || test -z "${DEKEN_USERNAME}" || test -z "${DEKEN_PASSWORD}" || deken upload --no-source-error ./*.dek
  artifacts:
    name: ${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_package
    paths:
      - ./*.dek
      - ./*.zip


#######################################################################
### the actual jobs: (linux,macos,windows)*(release)

### release jobs
Linux:
  extends:
    - .Linux
    - .base
Linux_i386:
  extends:
    - .Linux_i386
    - .base
Linux_ARM64:
  extends:
    - .Linux_ARM64
    - .base
Linux_ARMhf:
  extends:
    - .Linux_ARMhf
    - .base
Linux_wine:
  extends:
    - .Linux_wine
    - .base
Linux_wine32:
  extends:
    - .Linux_wine32
    - .base
Darwin:
  extends:
    - .Darwin
    - .base
w32:
  extends:
    - .w32
    - .base
w64:
  extends:
    - .w64
    - .base
package:
  extends:
    - .package
    - .base


include:
  # for the codesign templates
  - https://git.iem.at/pd/iem-ci/-/raw/main/pd-lib-builder/codesign.yml