#######################################################################
### .git-ci/gitlab-iem.yml for Pd externals: v1.2
###
### this can be used for any external with a build system like:
### - 'make' builds the external
### - 'make install' installs the external to be used by Pd
### the following make variables must be honoured:
### - extension: filename extension for externals
### - DESTDIR: base directory for 'make install'
### - pkglibdir: directory to put externals into (relative to DESTDIR)
###
### one well known build-system that can be used straight away is
### "pd-lib-builder" -> https://github.com/pure-data/pd-lib-builder/
#######################################################################

variables:
  PDVERSION: 0.49-0
  VST2DIR: /tmp/vst2sdk
  VST3DIR: /tmp/vst3sdk
  SC_PATH: /tmp/supercollider
  PDLIBNAME: "${CI_PROJECT_NAME}~"
  SCLIBNAME: VSTPlugin

#######################################################################
### configuration templates (to be used for snapshot and release builds)
.build:snapshot: &snapshot
  except:
    - tags
  artifacts: &snapshot_artifacts
    name: ${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_JOB_NAME%_*}
    paths:
      - "${PDLIBNAME}"
      - "${SCLIBNAME}"
    expire_in: 1 week

.build:release: &release
  only:
    - tags
  artifacts: &release_artifacts
    name: ${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_JOB_NAME%_*}
    paths:
      - "${PDLIBNAME}"
      - "${SCLIBNAME}"

.build:linux: &build_linux
  image: gcc
  stage: build
  variables:
    pd_extension: pd_linux
  before_script:
    - apt-get update && apt-get install -y --no-install-recommends make cmake
      puredata-dev puredata
    - export PD=/usr/bin/pd
    - .git-ci/get_vst2.sh "${VST2DIR}"
    - .git-ci/get_vst3.sh "${VST3DIR}"
    - git clone https://github.com/supercollider/supercollider.git "${SC_PATH}"
    - pushd "${SC_PATH}"
    - git submodule update --init
    - popd
    - cmake -H. -Bbuild -DSTATIC_LIBS=ON -DVST2DIR="${VST2DIR}" -DVST3DIR="${VST3DIR}"
      -DSTATIC_LIBS=ON -DPD_EXTENSION=${pd_extension} -DPD_INSTALLDIR=$(pwd)
      -DSC_INCLUDEDIR="${SC_PATH}" -DSUPERNOVA=ON -DSC_INSTALLDIR=$(pwd)
  script:
    - make -C build -j4 VERBOSE=1
    - make -C build install/strip VERBOSE=1

.build:linux_i386: &build_linux_i386
  allow_failure: true
  extends: .build:linux
  image: registry.git.iem.at/devtools/docker/debiancross:i386
  variables:
    pd_extension: l_i386

.build:macos: &build_macos
  tags:
     - osx
  stage: build
  before_script:
    - wget -q -O Pd.tgz http://msp.ucsd.edu/Software/pd-${PDVERSION}.mac.tar.gz
    - rm -rf /Applications/Pd*.app/
    - tar xvf Pd.tgz -C /Applications/
    - rm -f Pd.tgz
    - export PD=$(find /Applications/Pd*.app/Contents/Resources/bin/ type f -name pd -print -quit)
    - .git-ci/get_vst2.sh "${VST2DIR}"
    - .git-ci/get_vst3.sh "${VST3DIR}"
    - git clone https://github.com/supercollider/supercollider.git "${SC_PATH}"
    - pushd "${SC_PATH}"
    - git submodule update --init
    - popd
    - cmake -H. -Bbuild -DVST2DIR="${VST2DIR}" -DVST3DIR="${VST3DIR}"
      -DSC_INCLUDEDIR="${SC_PATH}" -DSUPERNOVA=ON -DSC_INSTALLDIR=$(pwd) -DPD_INSTALLDIR=$(pwd)
  script:
    - make -C build -j4 VERBOSE=1
    - make -C build install/strip VERBOSE=1

.build:w32: &build_w32
  stage: build
  tags:
    - windows
  variables:
    IEMCI_CONFIGURATIONS: mingw32
  before_script:
    - pacman --noconfirm -S cmake
    - wget -q -O Pd.zip http://msp.ucsd.edu/Software/pd-${PDVERSION}-i386.msw.zip
    - rm -rf "${PROGRAMFILESX86}/pd"; mkdir -p "${PROGRAMFILESX86}/pd"
    - unzip -q Pd.zip -d "${PROGRAMFILESX86}/pd"
    - mv -v "${PROGRAMFILESX86}/pd"/*/* "${PROGRAMFILESX86}/pd"
    - export PD="${PROGRAMFILESX86}/pd/bin/pd.com"
    - .git-ci/get_vst2.sh "${VST2DIR}"
    - .git-ci/get_vst3.sh "${VST3DIR}"
    - git clone https://github.com/supercollider/supercollider.git "${SC_PATH}"
    - pushd "${SC_PATH}"
    - git submodule update --init
    - popd
    - cmake -H. -Bbuild -DVST2DIR="${VST2DIR}" -DVST3DIR="${VST3DIR}"
      -DPD_INCLUDEDIR="/c/Program Files (x86)/pd/src" -DPD_BINDIR="/c/Program Files (x86)/pd/bin"
      -DPD_INSTALLDIR=$(pwd) -DSC_INCLUDEDIR="${SC_PATH}" -DSUPERNOVA=ON -DSC_INSTALLDIR=$(pwd)
  script:
    - make -C build -j4 VERBOSE=1
    - make -C build install/strip VERBOSE=1

.build:w64: &build_w64
  stage: build
  tags:
    - windows
  variables:
    IEMCI_CONFIGURATIONS: mingw64
  before_script:
    - pacman --noconfirm -S cmake
    - wget -q -O Pd.zip http://msp.ucsd.edu/Software/pd-${PDVERSION}.msw.zip
    - rm -rf "${PROGRAMFILES}/pd"; mkdir -p "${PROGRAMFILES}/pd"
    - unzip -q Pd.zip -d "${PROGRAMFILES}/pd"
    - mv -v "${PROGRAMFILES}/pd"/*/* "${PROGRAMFILES}/pd"
    - export PD="${PROGRAMFILES}/pd/bin/pd.com"
    - .git-ci/get_vst2.sh "${VST2DIR}"
    - .git-ci/get_vst3.sh "${VST3DIR}"
    - git clone https://github.com/supercollider/supercollider.git "${SC_PATH}"
    - pushd "${SC_PATH}"
    - git submodule update --init
    - popd
    - cmake -H. -Bbuild -DVST2DIR="${VST2DIR}" -DVST3DIR="${VST3DIR}" -DPD_EXTENSION=".m_amd64"
      -DPD_INCLUDEDIR="/c/Program Files/pd/src" -DPD_BINDIR="/c/Program Files/pd/bin"
      -DPD_INSTALLDIR=$(pwd) -DSC_INCLUDEDIR="${SC_PATH}" -DSUPERNOVA=ON -DSC_INSTALLDIR=$(pwd)
  script:
    - make -C build -j4 VERBOSE=1
    - make -C build install/strip VERBOSE=1

#######################################################################
### the actual jobs: (linux,macos,windows)*(release,snapshot)

Linux:
  <<: *build_linux
  <<: *release
Linux-i386:
  <<: *build_linux_i386
  <<: *release
Darwin:
  <<: *build_macos
  <<: *release
w32:
  <<: *build_w32
  <<: *release
w64:
  <<: *build_w64
  <<: *release


Linux_snapshot:
  <<: *build_linux
  <<: *snapshot
Linux-i386_snapshot:
  <<: *build_linux_i386
  <<: *snapshot
Darwin_snapshot:
  <<: *build_macos
  <<: *snapshot
w32_snapshot:
  <<: *build_w32
  <<: *snapshot
w64_snapshot:
  <<: *build_w64
  <<: *snapshot

#######################################################################
### create deken packages and (optionally) upload them
deken:
  stage: deploy
  image: debian:buster
  only:
    - tags
  variables:
    DEKEN_ROOT: "yes"
  before_script:
    - apt-get update && apt-get --no-install-recommends -y install deken git
  script:
    - chmod -R go-w .
    - git archive --format=tar --prefix=tmp/${PDLIBNAME}/ HEAD | tar xf -
    - deken package --version="${CI_COMMIT_TAG#v}" "tmp/${PDLIBNAME}"
    - deken package --version="${CI_COMMIT_TAG#v}" "${PDLIBNAME}"
    - test -z "${DEKEN_USERNAME}" || test -z "${DEKEN_PASSWORD}" || deken upload --no-source-error ./*.dek
